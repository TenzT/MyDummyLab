<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!--
        Bean的生成是依赖反射特性的，因此Bean要求提供无参构造器
    -->
    <bean name="helloSpring" class="spring.ioc.HelloSpring">
        <property name="name" value="Spring"></property>
    </bean>

    <!--
        通过构造器注入的方式创建Bean，要提供好属性（除非有相应的构造器），这里的类不需要提供get/set方法
        还可以指定index来标记输入实参的位置和参数的类型以区分构造器
        当出现参数列表
    -->
    <bean name="car" class="spring.ioc.Car">
        <constructor-arg value="Audi"></constructor-arg>
        <constructor-arg value="ShangHai"></constructor-arg>
        <constructor-arg value="3000"></constructor-arg>
        <constructor-arg value="12"></constructor-arg>
    </bean>

    <bean name="car2" class="spring.ioc.Car">
        <constructor-arg value="BMW"></constructor-arg>
        <constructor-arg value="ShangHai"></constructor-arg>
        <constructor-arg value="3000"></constructor-arg>
    </bean>

    <!--
        还可以在属性前用@Autowire进行自动装配，但是@Autowire是byType的
    -->
    <bean name="includeHello" class="spring.ioc.IncludeHello" autowire="byName">

    </bean>

    <!-- 导入资源文件 -->
    <context:property-placeholder location="spring/db.properties"/>

    <!-- 包扫描 -->
    <context:component-scan base-package="spring"></context:component-scan>

    <!-- 配置 C3P0 数据源bean -->
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>

        <property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
    </bean>

    <!-- 配置 Spirng 的 JdbcTemplate,JDBC模板 -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置DAObean -->
    <!--<bean id="bookShopDao" class="spring.aop.BookShopDaoImpl">-->
        <!--<property name="jdbcTemplate" ref="jdbcTemplate"></property>-->
    <!--</bean>-->

    <!-- 配置 NamedParameterJdbcTemplate, 该对象可以使用具名参数, 其没有无参数的构造器, 所以必须为其构造器指定参数 -->
    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"></constructor-arg>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 启用注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>